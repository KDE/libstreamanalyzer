#ifndef LATIN_TABLES_H
#define LATIN_TABLES_H

/**
 * Latin encodings:
 * WinAnsiEncoding
 * MacRomanEncoding
 * StandardEncoding
 * PdfDocEncoding
 */


struct BaseEncodingEntry {
    char encodedChar;
    int unicodeChar;
    char charName[100];
};

struct LatinEncodingTableEntry {
    unsigned char pdf;
    char win;
    char mac;
    char std;
    char name[20];
};

/**
 * Charcodes and names. PdfDocEncoding has a unique code
 * for each char, so it can be used as an identifier
 */
const LatinEncodingTableEntry latinEncodingTable[] = {
{ 0x41, 0x41, 0x41, 0x41, "A" },
{ 0xc6, 0xc6, 0xae, 0xe1, "AE" },
{ 0xc1, 0xc1, 0xe7, 0x0, "Aacute" },
{ 0xc2, 0xc2, 0xe5, 0x0, "Acircumflex" },
{ 0xc4, 0xc4, 0x80, 0x0, "Adieresis" },
{ 0xc0, 0xc0, 0xcb, 0x0, "Agrave" },
{ 0xc5, 0xc5, 0x81, 0x0, "Aring" },
{ 0xc3, 0xc3, 0xcc, 0x0, "Atilde" },
{ 0x42, 0x42, 0x42, 0x42, "B" },
{ 0x43, 0x43, 0x43, 0x43, "C" },
{ 0xc7, 0xc7, 0x82, 0x0, "Ccedilla" },
{ 0x44, 0x44, 0x44, 0x44, "D" },
{ 0x45, 0x45, 0x45, 0x45, "E" },
{ 0xc9, 0xc9, 0x83, 0x0, "Eacute" },
{ 0xca, 0xca, 0xe6, 0x0, "Ecircumflex" },
{ 0xcb, 0xcb, 0xe8, 0x0, "Edieresis" },
{ 0xc8, 0xc8, 0xe9, 0x0, "Egrave" },
{ 0xd0, 0xd0, 0x0, 0x0, "Eth" },
{ 0xa0, 0x80, 0x0, 0x0, "Euro" },
{ 0x46, 0x46, 0x46, 0x46, "F" },
{ 0x47, 0x47, 0x47, 0x47, "G" },
{ 0x48, 0x48, 0x48, 0x48, "H" },
{ 0x49, 0x49, 0x49, 0x49, "I" },
{ 0xcd, 0xcd, 0xea, 0x0, "Iacute" },
{ 0xce, 0xce, 0xeb, 0x0, "Icircumflex" },
{ 0xcf, 0xcf, 0xec, 0x0, "Idieresis" },
{ 0xcc, 0xcc, 0xed, 0x0, "Igrave" },
{ 0x4a, 0x4a, 0x4a, 0x4a, "J" },
{ 0x4b, 0x4b, 0x4b, 0x4b, "K" },
{ 0x4c, 0x4c, 0x4c, 0x4c, "L" },
{ 0x95, 0x0, 0x0, 0xe8, "Lslash" },
{ 0x4d, 0x4d, 0x4d, 0x4d, "M" },
{ 0x4e, 0x4e, 0x4e, 0x4e, "N" },
{ 0xd1, 0xd1, 0x84, 0x0, "Ntilde" },
{ 0x4f, 0x4f, 0x4f, 0x4f, "O" },
{ 0x96, 0x8c, 0xce, 0xea, "OE" },
{ 0xd3, 0xd3, 0xee, 0x0, "Oacute" },
{ 0xd4, 0xd4, 0xef, 0x0, "Ocircumflex" },
{ 0xd6, 0xd6, 0x85, 0x0, "Odieresis" },
{ 0xd2, 0xd2, 0xf1, 0x0, "Ograve" },
{ 0xd8, 0xd8, 0xaf, 0xe9, "Oslash" },
{ 0xd5, 0xd5, 0xcd, 0x0, "Otilde" },
{ 0x50, 0x50, 0x50, 0x50, "P" },
{ 0x51, 0x51, 0x51, 0x51, "Q" },
{ 0x52, 0x52, 0x52, 0x52, "R" },
{ 0x53, 0x53, 0x53, 0x53, "S" },
{ 0x97, 0x8a, 0x0, 0x0, "Scaron" },
{ 0x54, 0x54, 0x54, 0x54, "T" },
{ 0xde, 0xde, 0x0, 0x0, "Thorn" },
{ 0x55, 0x55, 0x55, 0x55, "U" },
{ 0xda, 0xda, 0xf2, 0x0, "Uacute" },
{ 0xdb, 0xdb, 0xf3, 0x0, "Ucircumflex" },
{ 0xdc, 0xdc, 0x86, 0x0, "Udieresis" },
{ 0xd9, 0xd9, 0xf4, 0x0, "Ugrave" },
{ 0x56, 0x56, 0x56, 0x56, "V" },
{ 0x57, 0x57, 0x57, 0x57, "W" },
{ 0x58, 0x58, 0x58, 0x58, "X" },
{ 0x59, 0x59, 0x59, 0x59, "Y" },
{ 0xdd, 0xdd, 0x0, 0x0, "Yacute" },
{ 0x98, 0x9f, 0xd9, 0x0, "Ydieresis" },
{ 0x5a, 0x5a, 0x5a, 0x5a, "Z" },
{ 0x99, 0x8e, 0x0, 0x0, "Zcaron" },
{ 0x61, 0x61, 0x61, 0x61, "a" },
{ 0xe1, 0xe1, 0x87, 0x0, "aacute" },
{ 0xe2, 0xe2, 0x89, 0x0, "acircumflex" },
{ 0xb4, 0xb4, 0xab, 0xc2, "acute" },
{ 0xe4, 0xe4, 0x8a, 0x0, "adieresis" },
{ 0xe6, 0xe6, 0xbe, 0xf1, "ae" },
{ 0xe0, 0xe0, 0x88, 0x0, "agrave" },
{ 0x26, 0x26, 0x26, 0x26, "ampersand" },
{ 0xe5, 0xe5, 0x8c, 0x0, "aring" },
{ 0x5e, 0x5e, 0x5e, 0x5e, "asciicircum" },
{ 0x7e, 0x7e, 0x7e, 0x7e, "asciitilde" },
{ 0x2a, 0x2a, 0x2a, 0x2a, "asterisk" },
{ 0x40, 0x40, 0x40, 0x40, "at" },
{ 0xe3, 0xe3, 0x8b, 0x0, "atilde" },
{ 0x62, 0x62, 0x62, 0x62, "b" },
{ 0x5c, 0x5c, 0x5c, 0x5c, "backslash" },
{ 0x7c, 0x7c, 0x7c, 0x7c, "bar" },
{ 0x7b, 0x7b, 0x7b, 0x7b, "braceleft" },
{ 0x7d, 0x7d, 0x7d, 0x7d, "braceright" },
{ 0x5b, 0x5b, 0x5b, 0x5b, "bracketleft" },
{ 0x5d, 0x5d, 0x5d, 0x5d, "bracketright" },
{ 0x18, 0x0, 0xf9, 0xc6, "breve" },
{ 0xa6, 0xa6, 0x0, 0x0, "brokenbar" },
{ 0x80, 0x95, 0xa5, 0xb7, "bullet" },
{ 0x63, 0x63, 0x63, 0x63, "c" },
{ 0x19, 0x0, 0xff, 0xcf, "caron" },
{ 0xe7, 0xe7, 0x8d, 0x0, "ccedilla" },
{ 0xb8, 0xb8, 0xfc, 0xcb, "cedilla" },
{ 0xa2, 0xa2, 0xa2, 0xa2, "cent" },
{ 0x1a, 0x88, 0xf6, 0xc3, "circumflex" },
{ 0x3a, 0x3a, 0x3a, 0x3a, "colon" },
{ 0x2c, 0x2c, 0x2c, 0x2c, "comma" },
{ 0xa9, 0xa9, 0xa9, 0x0, "copyright" },
{ 0xa4, 0xa4, 0xdb, 0xa8, "currency" },
{ 0x64, 0x64, 0x64, 0x64, "d" },
{ 0x81, 0x86, 0xa0, 0xb2, "dagger" },
{ 0x82, 0x87, 0xe0, 0xb3, "daggerdbl" },
{ 0xb0, 0xb0, 0xa1, 0x0, "degree" },
{ 0xa8, 0xa8, 0xac, 0xc8, "dieresis" },
{ 0xf7, 0xf7, 0xd6, 0x0, "divide" },
{ 0x24, 0x24, 0x24, 0x24, "dollar" },
{ 0x1b, 0x0, 0xfa, 0xc7, "dotaccent" },
{ 0x9a, 0x0, 0xf5, 0xf5, "dotlessi" },
{ 0x65, 0x65, 0x65, 0x65, "e" },
{ 0xe9, 0xe9, 0x8e, 0x0, "eacute" },
{ 0xea, 0xea, 0x90, 0x0, "ecircumflex" },
{ 0xeb, 0xeb, 0x91, 0x0, "edieresis" },
{ 0xe8, 0xe8, 0x8f, 0x0, "egrave" },
{ 0x38, 0x38, 0x38, 0x38, "eight" },
{ 0x83, 0x85, 0xc9, 0xbc, "ellipsis" },
{ 0x84, 0x97, 0xd1, 0xd0, "emdash" },
{ 0x85, 0x96, 0xd0, 0xb1, "endash" },
{ 0x3d, 0x3d, 0x3d, 0x3d, "equal" },
{ 0xf0, 0xf0, 0x0, 0x0, "eth" },
{ 0x21, 0x21, 0x21, 0x21, "exclam" },
{ 0xa1, 0xa1, 0xc1, 0xa1, "exclamdown" },
{ 0x66, 0x66, 0x66, 0x66, "f" },
{ 0x93, 0x0, 0xde, 0xae, "fi" },
{ 0x35, 0x35, 0x35, 0x35, "five" },
{ 0x94, 0x0, 0xdf, 0xaf, "fl" },
{ 0x86, 0x83, 0xc4, 0xa6, "florin" },
{ 0x34, 0x34, 0x34, 0x34, "four" },
{ 0x87, 0x0, 0xda, 0xa4, "fraction" },
{ 0x67, 0x67, 0x67, 0x67, "g" },
{ 0xdf, 0xdf, 0xa7, 0xfb, "germandbls" },
{ 0x60, 0x60, 0x60, 0xc1, "grave" },
{ 0x3e, 0x3e, 0x3e, 0x3e, "greater" },
{ 0xab, 0xab, 0xc7, 0xab, "guillemotleft" },
{ 0xbb, 0xbb, 0xc8, 0xbb, "guillemotright" },
{ 0x88, 0x8b, 0xdc, 0xac, "guilsinglleft" },
{ 0x89, 0x9b, 0xdd, 0xad, "guilsinglright" },
{ 0x68, 0x68, 0x68, 0x68, "h" },
{ 0x1c, 0x0, 0xfd, 0xcd, "hungarumlaut" },
{ 0x2d, 0x2d, 0x2d, 0x2d, "hyphen" },
{ 0x69, 0x69, 0x69, 0x69, "i" },
{ 0xed, 0xed, 0x92, 0x0, "iacute" },
{ 0xee, 0xee, 0x94, 0x0, "icircumflex" },
{ 0xef, 0xef, 0x95, 0x0, "idieresis" },
{ 0xec, 0xec, 0x93, 0x0, "igrave" },
{ 0x6a, 0x6a, 0x6a, 0x6a, "j" },
{ 0x6b, 0x6b, 0x6b, 0x6b, "k" },
{ 0x6c, 0x6c, 0x6c, 0x6c, "l" },
{ 0x3c, 0x3c, 0x3c, 0x3c, "less" },
{ 0xac, 0xac, 0xc2, 0x0, "logicalnot" },
{ 0x9b, 0x0, 0x0, 0xf8, "lslash" },
{ 0x6d, 0x6d, 0x6d, 0x6d, "m" },
{ 0xaf, 0xaf, 0xf8, 0xc5, "macron" },
{ 0x8a, 0x0, 0x0, 0x0, "minus" },
{ 0xb5, 0xb5, 0xb5, 0x0, "mu" },
{ 0xd7, 0xd7, 0x0, 0x0, "multiply" },
{ 0x6e, 0x6e, 0x6e, 0x6e, "n" },
{ 0x39, 0x39, 0x39, 0x39, "nine" },
{ 0xf1, 0xf1, 0x96, 0x0, "ntilde" },
{ 0x23, 0x23, 0x23, 0x23, "numbersign" },
{ 0x6f, 0x6f, 0x6f, 0x6f, "o" },
{ 0xf3, 0xf3, 0x97, 0x0, "oacute" },
{ 0xf4, 0xf4, 0x99, 0x0, "ocircumflex" },
{ 0xf6, 0xf6, 0x9a, 0x0, "odieresis" },
{ 0x9c, 0x9c, 0xcf, 0xfa, "oe" },
{ 0x1d, 0x0, 0xfe, 0xce, "ogonek" },
{ 0xf2, 0xf2, 0x98, 0x0, "ograve" },
{ 0x31, 0x31, 0x31, 0x31, "one" },
{ 0xbd, 0xbd, 0x0, 0x0, "onehalf" },
{ 0xbc, 0xbc, 0x0, 0x0, "onequarter" },
{ 0xb9, 0xb9, 0x0, 0x0, "onesuperior" },
{ 0xaa, 0xaa, 0xbb, 0xe3, "ordfeminine" },
{ 0xba, 0xba, 0xbc, 0xeb, "ordmasculine" },
{ 0xf8, 0xf8, 0xbf, 0xf9, "oslash" },
{ 0xf5, 0xf5, 0x9b, 0x0, "otilde" },
{ 0x70, 0x70, 0x70, 0x70, "p" },
{ 0xb6, 0xb6, 0xa6, 0xb6, "paragraph" },
{ 0x28, 0x28, 0x28, 0x28, "parenleft" },
{ 0x29, 0x29, 0x29, 0x29, "parenright" },
{ 0x25, 0x25, 0x25, 0x25, "percent" },
{ 0x2e, 0x2e, 0x2e, 0x2e, "period" },
{ 0xb7, 0xb7, 0xe1, 0xb4, "periodcentered" },
{ 0x8b, 0x89, 0xe4, 0xbd, "perthousand" },
{ 0x2b, 0x2b, 0x2b, 0x2b, "plus" },
{ 0xb1, 0xb1, 0xb1, 0x0, "plusminus" },
{ 0x71, 0x71, 0x71, 0x71, "q" },
{ 0x3f, 0x3f, 0x3f, 0x3f, "question" },
{ 0xbf, 0xbf, 0xc0, 0xbf, "questiondown" },
{ 0x22, 0x22, 0x22, 0x22, "quotedbl" },
{ 0x8c, 0x84, 0xe3, 0xb9, "quotedblbase" },
{ 0x8d, 0x93, 0xd2, 0xaa, "quotedblleft" },
{ 0x8e, 0x94, 0xd3, 0xba, "quotedblright" },
{ 0x8f, 0x91, 0xd4, 0x60, "quoteleft" },
{ 0x90, 0x92, 0xd5, 0x27, "quoteright" },
{ 0x91, 0x82, 0xe2, 0xb8, "quotesinglbase" },
{ 0x27, 0x27, 0x27, 0xa9, "quotesingle" },
{ 0x72, 0x72, 0x72, 0x72, "r" },
{ 0xae, 0xae, 0xa8, 0x0, "registered" },
{ 0x1e, 0x0, 0xfb, 0xca, "ring" },
{ 0x73, 0x73, 0x73, 0x73, "s" },
{ 0x9d, 0x9a, 0x0, 0x0, "scaron" },
{ 0xa7, 0xa7, 0xa4, 0xa7, "section" },
{ 0x3b, 0x3b, 0x3b, 0x3b, "semicolon" },
{ 0x37, 0x37, 0x37, 0x37, "seven" },
{ 0x36, 0x36, 0x36, 0x36, "six" },
{ 0x2f, 0x2f, 0x2f, 0x2f, "slash" },
{ 0x20, 0x20, 0x20, 0x20, "space" },
{ 0xa3, 0xa3, 0xa3, 0xa3, "sterling" },
{ 0x74, 0x74, 0x74, 0x74, "t" },
{ 0xfe, 0xfe, 0x0, 0x0, "thorn" },
{ 0x33, 0x33, 0x33, 0x33, "three" },
{ 0xbe, 0xbe, 0x0, 0x0, "threequarters" },
{ 0xb3, 0xb3, 0x0, 0x0, "threesuperior" },
{ 0x1f, 0x98, 0xf7, 0xc4, "tilde" },
{ 0x92, 0x99, 0xaa, 0x0, "trademark" },
{ 0x32, 0x32, 0x32, 0x32, "two" },
{ 0xb2, 0xb2, 0x0, 0x0, "twosuperior" },
{ 0x75, 0x75, 0x75, 0x75, "u" },
{ 0xfa, 0xfa, 0x9c, 0x0, "uacute" },
{ 0xfb, 0xfb, 0x9e, 0x0, "ucircumflex" },
{ 0xfc, 0xfc, 0x9f, 0x0, "udieresis" },
{ 0xf9, 0xf9, 0x9d, 0x0, "ugrave" },
{ 0x5f, 0x5f, 0x5f, 0x5f, "underscore" },
{ 0x76, 0x76, 0x76, 0x76, "v" },
{ 0x77, 0x77, 0x77, 0x77, "w" },
{ 0x78, 0x78, 0x78, 0x78, "x" },
{ 0x79, 0x79, 0x79, 0x79, "y" },
{ 0xfd, 0xfd, 0x0, 0x0, "yacute" },
{ 0xff, 0xff, 0xd8, 0x0, "ydieresis" },
{ 0xa5, 0xa5, 0xb4, 0xa5, "yen" },
{ 0x7a, 0x7a, 0x7a, 0x7a, "z" },
{ 0x9e, 0x9e, 0x0, 0x0, "zcaron" },
{ 0x30, 0x30, 0x30, 0x30, "zero" }};

#define latinEncodingTableLen ((int)(sizeof(latinEncodingTable) / sizeof(LatinEncodingTableEntry)))


/**
 * A corresponding utf16 code for each PdfDocEncoding character
 */
const int32_t pdfDocUnicodeCodes [] = {
0x0000,
0x0001,
0x0002,
0x0003,
0x0004,
0x0005,
0x0006,
0x0007,
0x0008,
0x0009,
0x000A,
0x000B,
0x000C,
0x000D,
0x000E,
0x000F,
0x0010,
0x0011,
0x0012,
0x0013,
0x0014,
0x0015,
0x0017,
0x0017,
0x02D8,
0x02C7,
0x02C6,
0x02D9,
0x02DD,
0x02DB,
0x02DA,
0x02DC,
0x0020,
0x0021,
0x0022,
0x0023,
0x0024,
0x0025,
0x0026,
0x0027,
0x0028,
0x0029,
0x002A,
0x002B,
0x002C,
0x002D,
0x002E,
0x002F,
0x0030,
0x0031,
0x0032,
0x0033,
0x0034,
0x0035,
0x0036,
0x0037,
0x0038,
0x0039,
0x003A,
0x003B,
0x003C,
0x003D,
0x003E,
0x003F,
0x0040,
0x0041,
0x0042,
0x0043,
0x0044,
0x0045,
0x0046,
0x0047,
0x0048,
0x0049,
0x004A,
0x004B,
0x004C,
0x004D,
0x004E,
0x004F,
0x0050,
0x0051,
0x0052,
0x0053,
0x0054,
0x0055,
0x0056,
0x0057,
0x0058,
0x0059,
0x005A,
0x005B,
0x005C,
0x005D,
0x005E,
0x005F,
0x0060,
0x0061,
0x0062,
0x0063,
0x0064,
0x0065,
0x0066,
0x0067,
0x0068,
0x0069,
0x006A,
0x006B,
0x006C,
0x006D,
0x006E,
0x006F,
0x0070,
0x0071,
0x0072,
0x0073,
0x0074,
0x0075,
0x0076,
0x0077,
0x0078,
0x0079,
0x007A,
0x007B,
0x007C,
0x007D,
0x007E,
0x00,  // UNDEFINED
0x2022,
0x2020,
0x2021,
0x2026,
0x2014,
0x2013,
0x0192,
0x2044,
0x2039,
0x203A,
0x2212,
0x2030,
0x201E,
0x201C,
0x201D,
0x2018,
0x2019,
0x201A,
0x2122,
0xFB01,
0xFB02,
0x0141,
0x0152,
0x0160,
0x0178,
0x017D,
0x0131,
0x0142,
0x0153,
0x0161,
0x017E,
0x00,  // UNDEFINED
0x20AC,
0x00A1,
0x00A2,
0x00A3,
0x00A4,
0x00A5,
0x00A6,
0x00A7,
0x00A8,
0x00A9,
0x00AA,
0x00AB,
0x00AC,
0x00,  // UNDEFINED
0x00AE,
0x00AF,
0x00B0,
0x00B1,
0x00B2,
0x00B3,
0x00B4,
0x00B5,
0x00B6,
0x00B7,
0x00B8,
0x00B9,
0x00BA,
0x00BB,
0x00BC,
0x00BD,
0x00BE,
0x00BF,
0x00C0,
0x00C1,
0x00C2,
0x00C3,
0x00C4,
0x00C5,
0x00C6,
0x00C7,
0x00C8,
0x00C9,
0x00CA,
0x00CB,
0x00CC,
0x00CD,
0x00CE,
0x00CF,
0x00D0,
0x00D1,
0x00D2,
0x00D3,
0x00D4,
0x00D5,
0x00D6,
0x00D7,
0x00D8,
0x00D9,
0x00DA,
0x00DB,
0x00DC,
0x00DD,
0x00DE,
0x00DF,
0x00E0,
0x00E1,
0x00E2,
0x00E3,
0x00E4,
0x00E5,
0x00E6,
0x00E7,
0x00E8,
0x00E9,
0x00EA,
0x00EB,
0x00EC,
0x00ED,
0x00EE,
0x00EF,
0x00F0,
0x00F1,
0x00F2,
0x00F3,
0x00F4,
0x00F5,
0x00F6,
0x00F7,
0x00F8,
0x00F9,
0x00FA,
0x00FB,
0x00FC,
0x00FD,
0x00FE,
0x00FF};

#endif