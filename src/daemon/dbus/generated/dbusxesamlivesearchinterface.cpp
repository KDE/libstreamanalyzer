// generated by makecode.pl
#include "dbusxesamlivesearchinterface.h"
#include <dbusobjectinterface.h>
#include <dbusmessagereader.h>
#include <dbusmessagewriter.h>
#include <sstream>
class PrivateDBusXesamLiveSearchInterface : public DBusObjectInterface {
private:
    DBusXesamLiveSearchInterface& impl;
    typedef void (PrivateDBusXesamLiveSearchInterface::*handlerFunction)
        (DBusMessage* msg, DBusConnection* conn);
    std::map<std::string, handlerFunction> handlers;
    DBusHandlerResult handleCall(DBusConnection*c,DBusMessage* m);
    std::string getIntrospectionXML();
    void GetState(DBusMessage* msg, DBusConnection* conn);
    void CloseSession(DBusMessage* msg, DBusConnection* conn);
    void NewSession(DBusMessage* msg, DBusConnection* conn);
    void NewSearch(DBusMessage* msg, DBusConnection* conn);
    void CountHits(DBusMessage* msg, DBusConnection* conn);
    void CloseSearch(DBusMessage* msg, DBusConnection* conn);
public:
    PrivateDBusXesamLiveSearchInterface(DBusXesamLiveSearchInterface& i);
};
PrivateDBusXesamLiveSearchInterface::PrivateDBusXesamLiveSearchInterface(DBusXesamLiveSearchInterface& i)
        :DBusObjectInterface("vandenoever.strigi"), impl(i) {
    handlers["GetState"] = &PrivateDBusXesamLiveSearchInterface::GetState;
    handlers["CloseSession"] = &PrivateDBusXesamLiveSearchInterface::CloseSession;
    handlers["NewSession"] = &PrivateDBusXesamLiveSearchInterface::NewSession;
    handlers["NewSearch"] = &PrivateDBusXesamLiveSearchInterface::NewSearch;
    handlers["CountHits"] = &PrivateDBusXesamLiveSearchInterface::CountHits;
    handlers["CloseSearch"] = &PrivateDBusXesamLiveSearchInterface::CloseSearch;
}
DBusHandlerResult
PrivateDBusXesamLiveSearchInterface::handleCall(DBusConnection*connection, DBusMessage* msg) {
    std::map<std::string, handlerFunction>::const_iterator h;
    const char* i = getInterfaceName().c_str();
    for (h = handlers.begin(); h != handlers.end(); ++h) {
        if (dbus_message_is_method_call(msg, i, h->first.c_str())) {
            (this->*h->second)(msg, connection);
            return DBUS_HANDLER_RESULT_HANDLED;
        }
    }
    return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
}
std::string
PrivateDBusXesamLiveSearchInterface::getIntrospectionXML() {
    std::ostringstream xml;
    xml << "  <interface name='"+getInterfaceName()+"'>\n"
    << "    <method name='GetState'>\n"
    << "      <arg name='out' type='as' direction='out'/>\n"
    << "    </method>\n"
    << "    <method name='CloseSession'>\n"
    << "      <arg name='session' type='s' direction='in'/>\n"
    << "    </method>\n"
    << "    <method name='NewSession'>\n"
    << "      <arg name='out' type='s' direction='out'/>\n"
    << "    </method>\n"
    << "    <method name='NewSearch'>\n"
    << "      <arg name='session' type='s' direction='in'/>\n"
    << "      <arg name='query_xml' type='s' direction='in'/>\n"
    << "      <arg name='out' type='s' direction='out'/>\n"
    << "    </method>\n"
    << "    <method name='CountHits'>\n"
    << "      <arg name='search' type='s' direction='in'/>\n"
    << "      <arg name='out' type='i' direction='out'/>\n"
    << "    </method>\n"
    << "    <method name='CloseSearch'>\n"
    << "      <arg name='search' type='s' direction='in'/>\n"
    << "    </method>\n"
    << "    <signal name='HitsModified'>\n"
    << "      <arg name='search' type='s'/>\n"
    << "      <arg name='hit_ids' type='ai'/>\n"
    << "    </signal>\n"
    << "    <signal name='HitsRemoved'>\n"
    << "      <arg name='search' type='s'/>\n"
    << "      <arg name='hit_ids' type='ai'/>\n"
    << "    </signal>\n"
    << "    <signal name='HitsAdded'>\n"
    << "      <arg name='search' type='s'/>\n"
    << "      <arg name='count' type='i'/>\n"
    << "    </signal>\n"
    << "  </interface>\n";
    return xml.str();
}
void
PrivateDBusXesamLiveSearchInterface::GetState(DBusMessage* msg, DBusConnection* conn) {
    DBusMessageReader reader(msg);
    DBusMessageWriter writer(conn, msg);
    if (reader.isOk()) {
        writer << impl.GetState();
    }
}
void
PrivateDBusXesamLiveSearchInterface::CloseSession(DBusMessage* msg, DBusConnection* conn) {
    DBusMessageReader reader(msg);
    DBusMessageWriter writer(conn, msg);
    std::string session;
    reader >> session;
    if (reader.isOk()) {
        impl.CloseSession(session);
    }
}
void
PrivateDBusXesamLiveSearchInterface::NewSession(DBusMessage* msg, DBusConnection* conn) {
    DBusMessageReader reader(msg);
    DBusMessageWriter writer(conn, msg);
    if (reader.isOk()) {
        writer << impl.NewSession();
    }
}
void
PrivateDBusXesamLiveSearchInterface::NewSearch(DBusMessage* msg, DBusConnection* conn) {
    DBusMessageReader reader(msg);
    DBusMessageWriter writer(conn, msg);
    std::string session;
    std::string query_xml;
    reader >> session >> query_xml;
    if (reader.isOk()) {
        writer << impl.NewSearch(session,query_xml);
    }
}
void
PrivateDBusXesamLiveSearchInterface::CountHits(DBusMessage* msg, DBusConnection* conn) {
    DBusMessageReader reader(msg);
    DBusMessageWriter writer(conn, msg);
    std::string search;
    reader >> search;
    if (reader.isOk()) {
        writer << impl.CountHits(search);
    }
}
void
PrivateDBusXesamLiveSearchInterface::CloseSearch(DBusMessage* msg, DBusConnection* conn) {
    DBusMessageReader reader(msg);
    DBusMessageWriter writer(conn, msg);
    std::string search;
    reader >> search;
    if (reader.isOk()) {
        impl.CloseSearch(search);
    }
}
DBusXesamLiveSearchInterface::DBusXesamLiveSearchInterface(const std::string& on, DBusConnection* c)
        :object(on), conn(c), iface(new PrivateDBusXesamLiveSearchInterface(*this)) {}
DBusXesamLiveSearchInterface::~DBusXesamLiveSearchInterface() {
    delete iface;
}
void
DBusXesamLiveSearchInterface::HitsModified(const std::string& search,         const std::vector<int32_t>& hit_ids) {
    DBusMessage* m = dbus_message_new_signal(object.c_str(), "vandenoever.strigi", "HitsModified");
    {   DBusMessageWriter writer(conn, m);
        writer << hit_ids;
    };
    dbus_connection_send(conn, m, NULL);
    dbus_message_unref(m);
}
void
DBusXesamLiveSearchInterface::HitsRemoved(const std::string& search,         const std::vector<int32_t>& hit_ids) {
    DBusMessage* m = dbus_message_new_signal(object.c_str(), "vandenoever.strigi", "HitsRemoved");
    {   DBusMessageWriter writer(conn, m);
        writer << hit_ids;
    };
    dbus_connection_send(conn, m, NULL);
    dbus_message_unref(m);
}
void
DBusXesamLiveSearchInterface::HitsAdded(const std::string& search, const int32_t count) {
    DBusMessage* m = dbus_message_new_signal(object.c_str(), "vandenoever.strigi", "HitsAdded");
    {   DBusMessageWriter writer(conn, m);
        writer << count;
    };
    dbus_connection_send(conn, m, NULL);
    dbus_message_unref(m);
}
