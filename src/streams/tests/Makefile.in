# Makefile.in generated by unsermake
####################################

top_builddir = ../../../..
top_srcdir = @top_srcdir@
srcdir = @srcdir@
.FORWARDS: all install install-data install-exec clean check force-reedit

all:
	@echo 'WARNING: use unsermake instead of make or use a wrapper script, e.g. makeobj!!!'
	unsermake all

install:
	@echo 'WARNING: use unsermake instead of make or use a wrapper script, e.g. makeobj!!!'
	unsermake install

install-data:
	@echo 'WARNING: use unsermake instead of make or use a wrapper script, e.g. makeobj!!!'
	unsermake install-data

install-exec:
	@echo 'WARNING: use unsermake instead of make or use a wrapper script, e.g. makeobj!!!'
	unsermake install-exec

clean:
	@echo 'WARNING: use unsermake instead of make or use a wrapper script, e.g. makeobj!!!'
	unsermake clean

check:
	@echo 'WARNING: use unsermake instead of make or use a wrapper script, e.g. makeobj!!!'
	unsermake check

force-reedit:
	@echo 'WARNING: use unsermake instead of make or use a wrapper script, e.g. makeobj!!!'
	unsermake force-reedit

$(top_builddir)/archivereader/src/streams/tests/Makefile: $(top_builddir)/config.status $(top_srcdir)/archivereader/src/streams/tests/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status archivereader/src/streams/tests/Makefile

all: $(top_builddir)/archivereader/src/streams/tests/Makefile
check-TESTS-top_archivereader_src_streams_tests: $(top_builddir)/archivereader/src/streams/tests/inputstreamtest
	@cd $(top_builddir)/$(subdir) ;\
	failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -gt `echo "$$banner" | wc -c` && \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -gt `echo "$$banner" | wc -c` && \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -n "$$skipped" && echo "$$skipped"; \
	  test -n "$$report" && echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

final: 
	unsermake -C $(top_builddir)/archivereader/src/streams/tests UNSERMAKE_FORCE_FINAL=1 inputstreamtest

METASOURCES = inputstreamtest=./inputstreamtest.h=inputstreamtest.cpp
__um_includes_inputstreamtest.h = inputstreamtest.cpp
__um_includes_inputstreamtest.moc = inputstreamtest.cpp
.PHONY: all check-TESTS-top_archivereader_src_streams_tests final
