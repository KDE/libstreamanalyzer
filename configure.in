AC_INIT(src/streams/streambase.h)
 
PACKAGE=jstreams
VERSION=0.1.0

dnl use libtool
AC_PROG_LIBTOOL
 
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

dnl check for pkg-config
PKG_PROG_PKG_CONFIG
if test "$PKG_CONFIG" = ""; then
    AC_MSG_ERROR(["You need pkgconfig."]);
fi

dnl check for c++
AC_PROG_CXX

dnl check if Qt gui should be used
AC_ARG_WITH(qt, [  --with-qt               use Qt GUI toolkit ])
if test "$with_qt" = "yes" -o "$enable_qt" = "yes" ; then 
  if test "$withval" = "no" ; then
    with_qt="no"
  else
    with_qt="yes"
  fi
fi

dnl configure QT
QT_REQ_VERSION=4.1.2
dnl Qt has split over multiple libraries, so we must check
dnl for the all the modules we need
PKG_CHECK_MODULES(QT, QtCore >= $QT_REQ_VERSION QtGui >= $QT_REQ_VERSION
        QtTest >= $QT_REQ_VERSION, have_qt="yes", have_qt="no")
dnl of the modules are there set up the variable QT_CXXFLAGS and QT_LIBS
if test "$have_qt" = "yes"; then
    QT_INCLUDE_DIR=$($PKG_CONFIG --variable=includedir Qt)
    QT_EXEC_PREFIX=$($PKG_CONFIG --variable=exec_prefix Qt)
    EXTRA_QT_INCLUDE_DIR="$QT_INCLUDE_DIR/Qt"
    AC_CHECK_FILE([$QT_INCLUDE_DIR/QWidget],
    AC_MSG_NOTICE([No extra QT_INCLUDE_DIR needed]),
    AC_CHECK_FILE([$EXTRA_QT_INCLUDE_DIR/QWidget],
    QT_CXXFLAGS="$QT_CXXFLAGS -I$EXTRA_QT_INCLUDE_DIR",
        AC_MSG_WARN([QWidget not found])))
    MOC=`$PKG_CONFIG --variable=exec_prefix QtCore`
    AC_CHECK_FILE([$MOC/bin/moc-qt4],
        MOC="$MOC/bin/moc-qt4",
        MOC="$MOC/bin/moc")
    AC_MSG_NOTICE([Set QT_CXXFLAGS... $QT_CXXFLAGS])
    AC_MSG_NOTICE([Set QT_LIBS... $QT_LIBS])
    AC_MSG_NOTICE([Set MOC... $MOC])
    AC_SUBST(MOC)
    AC_SUBST(QT_CXXFLAGS)
    AC_SUBST(QT_LIBS)
fi
AM_CONDITIONAL(HAVE_QTLIB, test "$have_qt" = "yes")

dnl check for dbus
PKG_CHECK_MODULES(dbus, dbus, have_dbus="yes", have_openssl="no")
AM_CONDITIONAL(HAVE_DBUS, test "$have_dubs" = "yes")

dnl check for openssl
PKG_CHECK_MODULES(openssl, openssl >= 0, have_openssl="yes", have_openssl="no")
AM_CONDITIONAL(HAVE_OPENSSL, test "$have_openssl" = "yes")

dnl check for CLucene
dnl currently disabled because the code's not finished yet
AC_CHECK_HEADER(CLucene/clucene-config.h, [have_clucenelib=yes], )
AM_CONDITIONAL(HAVE_CLUCENE, test "$have_clucenelib" = "yes")

dnl check for xapian
AC_PATH_PROG(XAPIAN_CONFIG, xapian-config, no)
AM_CONDITIONAL(HAVE_XAPIAN, test "$XAPIAN_CONFIG" != "no")
LIBXAPIAN=`$XAPIAN_CONFIG --libs`
# Workaround for problem in xapian-config in some versions: wrongly lists
# libstdc++.la in the lib list
for i in $LIBXAPIAN ; do
    case $i in
    *libstdc++.la);;
    *) tmpxaplib="$tmpxaplib $i";;
    esac
done
LIBXAPIAN=$tmpxaplib
XAPIANCXXFLAGS=`$XAPIAN_CONFIG --cxxflags`

dnl check for estraier
AC_PATH_PROG(ESTRAIER_CONFIG, estconfig, no)
AM_CONDITIONAL(HAVE_ESTRAIER, test "$ESTRAIER_CONFIG" != "no")
if test "$ESTRAIER_CONFIG" != "no"; then
    ESTRAIERLDFLAGS=`$ESTRAIER_CONFIG --ldflags`
    AC_SUBST(ESTRAIERLDFLAGS)
    ESTRAIERLIBS=`$ESTRAIER_CONFIG --libs`
    AC_SUBST(ESTRAIERLIBS)
    ESTRAIERCFLAGS=`$ESTRAIER_CONFIG --cflags`
    AC_SUBST(ESTRAIERCFLAGS)
fi

dnl check for slqlite3
PKG_CHECK_MODULES(sqlite3, sqlite3 >= 0, have_sqlite3="yes", have_sqlite3="no")
AM_CONDITIONAL(HAVE_SQLITE, test "$have_sqlite3" = "yes")

dnl check for sys_ioprio_set
AC_CHECK_HEADER(linux/ioprio.h, [have_linuxioprio=yes], )
AM_CONDITIONAL(HAVE_LINUXIOPRIO, test "$have_linuxioprio" = "yes")

dnl check for iconv
AM_ICONV

AC_OUTPUT( Makefile \
	src/Makefile \
	src/streams/Makefile \
        src/streams/tests/Makefile \
        src/streamindexer/Makefile \
        src/luceneindexer/Makefile \
        src/sqliteindexer/Makefile \
        src/estraierindexer/Makefile \
        src/xapianindexer/Makefile \
        src/dummyindexer/Makefile \
        src/daemon/Makefile \
        src/archiveengine/Makefile \
        src/archiveengine/tests/Makefile \
        src/searchclient/Makefile \
        src/qclient/Makefile )
